name: Build and Push Docker Image

on:
  workflow_dispatch:

jobs:
  build-backend:
    name: Backend Build
    timeout-minutes: 10
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          path: cloudbeaver

      - name: Clone Deps Repositories
        uses: dbeaver/github-actions/clone-repositories@devel
        with:
          project_deps_path: "./cloudbeaver/project.deps"

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"
          cache: maven

      - uses: dbeaver/github-actions/install-maven@devel

      - name: Run build script
        run: ./build-backend.sh
        shell: bash
        working-directory: ./cloudbeaver/deploy

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build-artifacts
          path: cloudbeaver/deploy/cloudbeaver
          if-no-files-found: error

  build-frontend:
    name: Frontend Build
    runs-on: ubuntu-latest
    needs: build-backend
    timeout-minutes: 10
    permissions:
      contents: read

    outputs:
      build-status: ${{ steps.build.outcome }}
      test-status: ${{ steps.test.outcome }}

    defaults:
      run:
        working-directory: ./webapp

    steps:
      - uses: actions/checkout@v4

      - run: corepack enable
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: yarn
          cache-dependency-path: webapp/yarn.lock

      - name: Restore node_modules
        uses: actions/cache@v4
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-node_modules-${{ hashFiles('webapp/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

      - name: Restore TypeScript cache
        uses: actions/cache@v4
        with:
          path: "**/packages/*/dist"
          key: ${{ runner.os }}-dist-${{ hashFiles('webapp/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-dist-

      - name: Yarn Clean
        if: env.skip_cache == 'true'
        run: yarn clear

      - run: yarn install --immutable

      - run: yarn bundle
        working-directory: ./webapp/packages/product-default

      - run: yarn test

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-artifacts
          path: webapp/packages/product-default/lib
          if-no-files-found: error

  build-and-push-docker:
    name: Docker Image Build and Push
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Backend Artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build-artifacts
          path: deploy/cloudbeaver/

      - name: Download Frontend Artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build-artifacts
          path: deploy/cloudbeaver/web

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run Custom Docker Build Script
        run: ./make-docker-container.sh
        shell: bash
        working-directory: ./deploy/docker

      - name: Tag Docker Image
        run: |
          REPO_NAME=$(basename ${{ github.repository }})
          IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/$REPO_NAME
          BRANCH_NAME=${{ github.head_ref || github.ref_name }}
          TAG_NAME=$(echo $BRANCH_NAME | sed 's/[^a-zA-Z0-9._-]/-/g')
          docker tag dbeaver/cloudbeaver:dev $IMAGE_NAME:$TAG_NAME
          echo "image=$IMAGE_NAME:$TAG_NAME" >> $GITHUB_ENV

      # - name: Install Docker Credential Helper
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y gnupg2 pass
      #     curl -fsSL https://github.com/docker/docker-credential-helpers/releases/download/v0.6.4/docker-credential-pass-v0.6.4-amd64.tar.gz -o docker-credential-pass.tar.gz
      #     tar xzvf docker-credential-pass.tar.gz
      #     sudo mv docker-credential-pass /usr/local/bin/docker-credential-pass
      #     sudo chmod +x /usr/local/bin/docker-credential-pass

      # - name: Configure Docker to use Credential Helper
      #   run: |
      #     mkdir -p ~/.docker
      #     echo '{"credsStore":"pass"}' > ~/.docker/config.json

      # - name: Initialize Password Store
      #   run: |
      #     gpg --batch --gen-key <<EOF
      #     %no-protection
      #     Key-Type: default
      #     Subkey-Type: default
      #     Name-Real: Docker Credential Helper
      #     Expire-Date: 0
      #     %commit
      #     EOF
      #     pass init "$(gpg --list-keys --with-colons | grep '^pub' | cut -d: -f5)"

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

      - name: Push Docker Image
        run: docker push ${{ env.image }}

      # - name: Comment on Pull Request
      #   if: github.event_name == 'pull_request'
      #   uses: actions/github-script@v6
      #   with:
      #     github-token: ${{ secrets.PAT }}
      #     script: |
      #       const tag = process.env.TAG_NAME;
      #       const commentBody = `The Docker image has been built and pushed to Docker Hub.\n\nYou can pull the image using the following command:\n\`\`\`\ndocker pull dbeaver/cloudbeaver:${tag}\n\`\`\``;
      #       github.rest.issues.createComment({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         issue_number: context.issue.number,
      #         body: commentBody
      #       });
